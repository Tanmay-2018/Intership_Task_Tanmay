RDBMS_TASK TANMAY------>
------------
1. TASK_UNIVERSITY_MANAGEMENT:-

    1. Find the Total Number of Students in Each Department
sql
Copy code
SELECT d.department_id, 
       d.department_name, 
       COUNT(s.student_id) AS total_students
FROM Departments d
LEFT JOIN Students s ON d.department_id = s.department_id
GROUP BY d.department_id, d.department_name;
    2. List All Courses Taught by a Specific Professor
sql
Copy code
SELECT c.course_id, 
       c.course_name, 
       d.department_name, 
       c.credits
FROM Courses c
INNER JOIN Departments d ON c.department_id = d.department_id
WHERE c.professor_id = (SELECT professor_id FROM Professors WHERE first_name = 'John' AND last_name = 'Doe');
    3. Find the Average Grade of Students in Each Course
sql
Copy code
SELECT c.course_id, 
       c.course_name, 
       AVG(CASE 
               WHEN e.grade = 'A' THEN 4.0
               WHEN e.grade = 'B' THEN 3.0
               WHEN e.grade = 'C' THEN 2.0
               WHEN e.grade = 'D' THEN 1.0
               ELSE 0.0
           END) AS average_grade
FROM Enrollments e
INNER JOIN Courses c ON e.course_id = c.course_id
GROUP BY c.course_id, c.course_name;
    4. List All Students Who Have Not Enrolled in Any Courses
sql
Copy code
SELECT s.student_id, 
       CONCAT(s.first_name, ' ', s.last_name) AS student_name, 
       s.email
FROM Students s
WHERE s.student_id NOT IN (SELECT student_id FROM Enrollments);
    5. Find the Number of Courses Offered by Each Department
sql
Copy code
SELECT d.department_id, 
       d.department_name, 
       COUNT(c.course_id) AS total_courses
FROM Departments d
LEFT JOIN Courses c ON d.department_id = c.department_id
GROUP BY d.department_id, d.department_name;
    6. List All Students Who Have Taken a Specific Course (e.g., 'Database Systems')
sql
Copy code
SELECT s.student_id, 
       CONCAT(s.first_name, ' ', s.last_name) AS student_name, 
       s.email
FROM Students s
INNER JOIN Enrollments e ON s.student_id = e.student_id
INNER JOIN Courses c ON e.course_id = c.course_id
WHERE c.course_name = 'Database Systems';
    7. Find the Most Popular Course Based on Enrollment Numbers
sql
Copy code
SELECT c.course_id, 
       c.course_name, 
       COUNT(e.enrollment_id) AS total_enrollments
FROM Courses c
INNER JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id, c.course_name
ORDER BY total_enrollments DESC
LIMIT 1;
    8. Find the Average Number of Credits Per Student in a Department
sql
Copy code
SELECT d.department_id, 
       d.department_name, 
       AVG(c.credits) AS avg_credits_per_student
FROM Departments d
INNER JOIN Students s ON d.department_id = s.department_id
INNER JOIN Enrollments e ON s.student_id = e.student_id
INNER JOIN Courses c ON e.course_id = c.course_id
GROUP BY d.department_id, d.department_name;
    9. List All Professors Who Teach in More Than One Department
sql
Copy code
SELECT p.professor_id, 
       CONCAT(p.first_name, ' ', p.last_name) AS professor_name, 
       COUNT(DISTINCT c.department_id) AS total_departments
FROM Professors p
INNER JOIN Courses c ON p.professor_id = c.professor_id
GROUP BY p.professor_id, professor_name
HAVING total_departments > 1;
    10. Get the Highest and Lowest Grade in a Specific Course (e.g., 'Operating Systems')
sql
Copy code
SELECT c.course_id, 
       c.course_name, 
       MAX(e.grade) AS highest_grade, 
       MIN(e.grade) AS lowest_grade
FROM Courses c
INNER JOIN Enrollments e ON c.course_id = e.course_id
WHERE c.course_name = 'Operating Systems'
GROUP BY c.course_id, c.course_name;

2.TASK_OLA:-

1. Retrieve the names and contact details of all drivers with a rating of 4.5 or higher
SELECT DriverID, 
       CONCAT(FirstName, ' ', LastName) AS DriverName, 
       Phone, 
       City, 
       Rating
FROM Drivers
WHERE Rating >= 4.5;

2. Find the total number of rides completed by each driver
SELECT d.DriverID, 
       CONCAT(d.FirstName, ' ', d.LastName) AS DriverName, 
       COUNT(r.RideID) AS TotalRidesCompleted
FROM Drivers d
LEFT JOIN Rides r ON d.DriverID = r.DriverID
WHERE r.RideStatus = 'Completed'
GROUP BY d.DriverID, DriverName;

3. List all riders who have never booked a ride
SELECT RiderID, 
       CONCAT(FirstName, ' ', LastName) AS RiderName, 
       Phone, 
       City
FROM Riders
WHERE RiderID NOT IN (SELECT RiderID FROM Rides);
   
4. Calculate the total earnings of each driver from completed rides
SELECT d.DriverID, 
       CONCAT(d.FirstName, ' ', d.LastName) AS DriverName, 
       SUM(r.Fare) AS TotalEarnings
FROM Drivers d
INNER JOIN Rides r ON d.DriverID = r.DriverID
WHERE r.RideStatus = 'Completed'
GROUP BY d.DriverID, DriverName;

5. Retrieve the most recent ride for each rider
SELECT r1.RiderID, 
       CONCAT(ri.FirstName, ' ', ri.LastName) AS RiderName, 
       r1.RideID, 
       r1.RideDate, 
       r1.PickupLocation, 
       r1.DropLocation, 
       r1.Fare
FROM Rides r1
INNER JOIN Riders ri ON r1.RiderID = ri.RiderID
WHERE r1.RideDate = (SELECT MAX(r2.RideDate) 
                     FROM Rides r2 
                     WHERE r2.RiderID = r1.RiderID);
6. Count the number of rides taken in each city
sql
Copy code
SELECT City, 
       COUNT(RideID) AS TotalRides
FROM Rides r
INNER JOIN Riders ri ON r.RiderID = ri.RiderID
GROUP BY City;

7. List all rides where the distance was greater than 20 km
sql
Copy code
SELECT RideID, 
       CONCAT(ri.FirstName, ' ', ri.LastName) AS RiderName, 
       CONCAT(d.FirstName, ' ', d.LastName) AS DriverName, 
       Distance, 
       Fare, 
       RideStatus
FROM Rides r
INNER JOIN Riders ri ON r.RiderID = ri.RiderID
INNER JOIN Drivers d ON r.DriverID = d.DriverID
WHERE Distance > 20;

8. Identify the most preferred payment method
sql
Copy code
SELECT PaymentMethod, 
       COUNT(PaymentID) AS TotalPayments
FROM Payments
GROUP BY PaymentMethod
ORDER BY TotalPayments DESC
LIMIT 1;

9. Find the top 3 highest-earning drivers
sql
Copy code
SELECT d.DriverID, 
       CONCAT(d.FirstName, ' ', d.LastName) AS DriverName, 
       SUM(r.Fare) AS TotalEarnings
FROM Drivers d
INNER JOIN Rides r ON d.DriverID = r.DriverID
WHERE r.RideStatus = 'Completed'
GROUP BY d.DriverID, DriverName
ORDER BY TotalEarnings DESC
LIMIT 3;

10. Retrieve details of all cancelled rides along with the rider's and driver's names
sql
Copy code
SELECT r.RideID, 
       CONCAT(ri.FirstName, ' ', ri.LastName) AS RiderName, 
       CONCAT(d.FirstName, ' ', d.LastName) AS DriverName, 
       r.RideDate, 
       r.PickupLocation, 
       r.DropLocation, 
       r.Fare
FROM Rides r
INNER JOIN Riders ri ON r.RiderID = ri.RiderID
INNER JOIN Drivers d ON r.DriverID = d.DriverID
WHERE r.RideStatus = 'Cancelled';

3.RETAIL_STORE

1. Find the Total Number of Orders for Each Customer
sql
Copy code
SELECT c.customer_id, 
       CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
       COUNT(o.order_id) AS total_orders
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, customer_name;

2. Find the Total Sales Amount for Each Product (Revenue per Product)
sql
Copy code
SELECT p.product_id, 
       p.product_name, 
       SUM(od.quantity * od.unit_price) AS total_sales
FROM Products p
LEFT JOIN OrderDetails od ON p.product_id = od.product_id
GROUP BY p.product_id, p.product_name;

3. Find the Most Expensive Product Sold
sql
Copy code
SELECT p.product_id, 
       p.product_name, 
       p.price AS product_price
FROM Products p
ORDER BY p.price DESC
LIMIT 1;

4. Get the List of Customers Who Have Placed Orders in the Last 30 Days
sql
Copy code
SELECT DISTINCT c.customer_id, 
                CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
                c.email, 
                c.phone
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

5. Calculate the Total Amount Paid by Each Customer
sql
Copy code
SELECT c.customer_id, 
       CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
       SUM(p.payment_amount) AS total_paid
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id
INNER JOIN Payments p ON o.order_id = p.order_id
GROUP BY c.customer_id, customer_name;

6. Get the Number of Products Sold by Category
sql
Copy code
SELECT p.category, 
       SUM(od.quantity) AS total_products_sold
FROM Products p
INNER JOIN OrderDetails od ON p.product_id = od.product_id
GROUP BY p.category;


7. List All Orders That Are Pending (i.e., Orders that haven't been shipped yet)
sql
Copy code
SELECT o.order_id, 
       CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
       o.order_date, 
       o.total_amount, 
       o.order_status
FROM Orders o
INNER JOIN Customers c ON o.customer_id = c.customer_id
WHERE o.order_status = 'Pending';

8. Find the Average Order Value (Total Order Amount / Number of Orders)
sql
Copy code
SELECT AVG(total_amount) AS average_order_value
FROM Orders;

9. List the Top 5 Customers Who Have Spent the Most Money
sql
Copy code
SELECT c.customer_id, 
       CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
       SUM(p.payment_amount) AS total_spent
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id
INNER JOIN Payments p ON o.order_id = p.order_id
GROUP BY c.customer_id, customer_name
ORDER BY total_spent DESC
LIMIT 5;

10. Find the Products That Have Never Been Sold
sql
Copy code
SELECT p.product_id, 
       p.product_name, 
       p.category, 
       p.price, 
       p.stock_quantity
FROM Products p
LEFT JOIN OrderDetails od ON p.product_id = od.product_id
WHERE od.product_id IS NULL;


4.HR_MANAGEMENT

1. Retrieve the names and contact details of employees hired after January 1, 2023.
sql
Copy code
SELECT FirstName, LastName, Email, Phone
FROM Employees
WHERE HireDate > '2023-01-01';

2. Find the total payroll amount paid to each department.
sql
Copy code
SELECT d.DepartmentName, 
       SUM(p.Amount) AS total_payroll
FROM Departments d
INNER JOIN Employees e ON d.DepartmentID = e.DepartmentID
INNER JOIN Payroll p ON e.EmployeeID = p.EmployeeID
GROUP BY d.DepartmentID, d.DepartmentName;

3. List all employees who have not been assigned a manager.
sql
Copy code
SELECT FirstName, LastName
FROM Employees
WHERE ManagerID IS NULL;

4. Retrieve the highest salary in each department along with the employee’s name.
sql
Copy code
SELECT d.DepartmentName, 
       e.FirstName, 
       e.LastName, 
       e.Salary AS highest_salary
FROM Employees e
INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID
WHERE e.Salary = (
    SELECT MAX(Salary) 
    FROM Employees e2 
    WHERE e2.DepartmentID = e.DepartmentID
);

5. Find the most recent performance review for each employee.
sql
Copy code
SELECT e.FirstName, 
       e.LastName, 
       pr.ReviewDate, 
       pr.PerformanceScore, 
       pr.Comments
FROM Employees e
INNER JOIN PerformanceReviews pr ON e.EmployeeID = pr.EmployeeID
WHERE pr.ReviewDate = (
    SELECT MAX(ReviewDate) 
    FROM PerformanceReviews pr2 
    WHERE pr2.EmployeeID = pr.EmployeeID
);

6. Count the number of employees in each department.
sql
Copy code
SELECT d.DepartmentName, 
       COUNT(e.EmployeeID) AS total_employees
FROM Departments d
LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID
GROUP BY d.DepartmentID, d.DepartmentName;

7. List all employees who have received a performance score of "Excellent."
sql
Copy code
SELECT e.FirstName, 
       e.LastName, 
       pr.PerformanceScore
FROM Employees e
INNER JOIN PerformanceReviews pr ON e.EmployeeID = pr.EmployeeID
WHERE pr.PerformanceScore = 'Excellent';

8. Identify the most frequently used payment method in payroll.
sql
Copy code
SELECT PaymentMethod, 
       COUNT(PaymentID) AS total_count
FROM Payroll
GROUP BY PaymentMethod
ORDER BY total_count DESC
LIMIT 1;

9. Retrieve the top 5 highest-paid employees along with their departments.
sql
Copy code
SELECT e.FirstName, 
       e.LastName, 
       e.Salary, 
       d.DepartmentName
FROM Employees e
INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID
ORDER BY e.Salary DESC
LIMIT 5;

10. Show details of all employees who report directly to a specific manager (e.g., ManagerID = 101).
sql
Copy code
SELECT e.EmployeeID, 
       e.FirstName, 
       e.LastName, 
       e.Email, 
       e.Phone, 
       d.DepartmentName
FROM Employees e
INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID
WHERE e.ManagerID = 101;


5.ZOMATO

1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.
sql
Copy code
SELECT Name AS restaurant_name, City AS restaurant_city
FROM Restaurants
WHERE Rating >= 4.5;

2. Find the total number of orders placed by each customer.
sql
Copy code
SELECT c.FirstName AS customer_first_name, 
       c.LastName AS customer_last_name, 
       COUNT(o.OrderID) AS total_orders
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.FirstName, c.LastName;

3. List all restaurants offering "Italian" cuisine in "Mumbai".
sql
Copy code
SELECT Name AS restaurant_name, City AS restaurant_city
FROM Restaurants
WHERE CuisineType = 'Italian' AND City = 'Mumbai';

4. Calculate the total revenue generated by each restaurant from completed orders.
sql
Copy code
SELECT r.Name AS restaurant_name, 
       SUM(o.OrderAmount) AS total_revenue
FROM Restaurants r
INNER JOIN Orders o ON r.RestaurantID = o.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.RestaurantID, r.Name;

5. Retrieve the most recent order placed by each customer.
sql
Copy code
SELECT c.FirstName AS customer_first_name, 
       c.LastName AS customer_last_name, 
       o.OrderID AS recent_order_id, 
       o.OrderDate
FROM Customers c
INNER JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate = (
    SELECT MAX(OrderDate) 
    FROM Orders o2 
    WHERE o2.CustomerID = o.CustomerID
);


Here are the SQL solutions for the 10 queries based on the scenario and schema of a food delivery application:

1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.
sql
Copy code
SELECT Name AS restaurant_name, City AS restaurant_city
FROM Restaurants
WHERE Rating >= 4.5;
2. Find the total number of orders placed by each customer.
sql
Copy code
SELECT c.FirstName AS customer_first_name, 
       c.LastName AS customer_last_name, 
       COUNT(o.OrderID) AS total_orders
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.FirstName, c.LastName;
3. List all restaurants offering "Italian" cuisine in "Mumbai".
sql
Copy code
SELECT Name AS restaurant_name, City AS restaurant_city
FROM Restaurants
WHERE CuisineType = 'Italian' AND City = 'Mumbai';
4. Calculate the total revenue generated by each restaurant from completed orders.
sql
Copy code
SELECT r.Name AS restaurant_name, 
       SUM(o.OrderAmount) AS total_revenue
FROM Restaurants r
INNER JOIN Orders o ON r.RestaurantID = o.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.RestaurantID, r.Name;
5. Retrieve the most recent order placed by each customer.
sql
Copy code
SELECT c.FirstName AS customer_first_name, 
       c.LastName AS customer_last_name, 
       o.OrderID AS recent_order_id, 
       o.OrderDate
FROM Customers c
INNER JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate = (
    SELECT MAX(OrderDate) 
    FROM Orders o2 
    WHERE o2.CustomerID = o.CustomerID
);
6. List customers who have not placed any orders yet.
sql
Copy code
SELECT c.FirstName AS customer_first_name, 
       c.LastName AS customer_last_name
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL;

7. Identify the most reviewed restaurants.
sql
Copy code
SELECT r.Name AS restaurant_name, 
       COUNT(rev.ReviewID) AS total_reviews
FROM Restaurants r
INNER JOIN Reviews rev ON r.RestaurantID = rev.RestaurantID
GROUP BY r.RestaurantID, r.Name
ORDER BY total_reviews DESC
LIMIT 1;

8. Find the most preferred payment method.
sql
Copy code
SELECT PaymentMethod, 
       COUNT(PaymentID) AS total_payments
FROM Payments
GROUP BY PaymentMethod
ORDER BY total_payments DESC
LIMIT 1;

9. List the top 5 restaurants by total revenue.
sql
Copy code
SELECT r.Name AS restaurant_name, 
       SUM(o.OrderAmount) AS total_revenue
FROM Restaurants r
INNER JOIN Orders o ON r.RestaurantID = o.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.RestaurantID, r.Name
ORDER BY total_revenue DESC
LIMIT 5;


10. Show the details of all cancelled orders along with the customer's and restaurant's names.
sql
Copy code
SELECT o.OrderID, 
       o.OrderDate, 
       o.OrderAmount, 
       c.FirstName AS customer_first_name, 
       c.LastName AS customer_last_name, 
       r.Name AS restaurant_name
FROM Orders o
INNER JOIN Customers c ON o.CustomerID = c.CustomerID
INNER JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Cancelled';


6.HOSPITAL_MANAGEMENT

1. Find the Total Number of Appointments for Each Doctor
sql
Copy code
SELECT d.first_name AS doctor_first_name, 
       d.last_name AS doctor_last_name, 
       COUNT(a.appointment_id) AS total_appointments
FROM Doctors d
LEFT JOIN Appointments a ON d.doctor_id = a.doctor_id
GROUP BY d.doctor_id, d.first_name, d.last_name;

2. List All Patients Who Have an Appointment with a Specific Doctor (e.g., Dr. John Smith)
sql
Copy code
SELECT p.first_name AS patient_first_name, 
       p.last_name AS patient_last_name, 
       a.appointment_date
FROM Appointments a
INNER JOIN Doctors d ON a.doctor_id = d.doctor_id
INNER JOIN Patients p ON a.patient_id = p.patient_id
WHERE d.first_name = 'John' AND d.last_name = 'Smith';

3. Find the Number of Appointments Scheduled in a Specific Department
sql
Copy code
SELECT dep.department_name, 
       COUNT(a.appointment_id) AS total_appointments
FROM Appointments a
INNER JOIN Doctors d ON a.doctor_id = d.doctor_id
INNER JOIN Departments dep ON d.department_id = dep.department_id
WHERE dep.department_name = 'Cardiology'
GROUP BY dep.department_name;

4. Find the Most Popular Specialty Based on Number of Appointments
sql
Copy code
SELECT s.specialty_name, 
       COUNT(a.appointment_id) AS total_appointments
FROM Appointments a
INNER JOIN Doctors d ON a.doctor_id = d.doctor_id
INNER JOIN Specialties s ON d.specialty_id = s.specialty_id
GROUP BY s.specialty_name
ORDER BY total_appointments DESC
LIMIT 1;

5. Get the Total Payment Amount for All Completed Appointments
sql
Copy code
SELECT SUM(p.payment_amount) AS total_payment_amount
FROM Payments p
INNER JOIN Appointments a ON p.appointment_id = a.appointment_id
WHERE a.status = 'Completed';

6. Find the Number of Patients Seen by Each Doctor
sql
Copy code
SELECT d.first_name AS doctor_first_name, 
       d.last_name AS doctor_last_name, 
       COUNT(DISTINCT a.patient_id) AS total_patients_seen
FROM Doctors d
LEFT JOIN Appointments a ON d.doctor_id = a.doctor_id
GROUP BY d.doctor_id, d.first_name, d.last_name;

7. List All Patients Who Have Missed Their Appointments (Status 'Cancelled')
sql
Copy code
SELECT p.first_name AS patient_first_name, 
       p.last_name AS patient_last_name, 
       a.appointment_date
FROM Appointments a
INNER JOIN Patients p ON a.patient_id = p.patient_id
WHERE a.status = 'Cancelled';

8. Find the Total Number of Appointments for Each Status (Scheduled, Completed, Cancelled)
sql
Copy code
SELECT a.status, 
       COUNT(a.appointment_id) AS total_appointments
FROM Appointments a
GROUP BY a.status;


9. Get the Average Payment Amount for Completed Appointments
sql
Copy code
SELECT AVG(p.payment_amount) AS average_payment
FROM Payments p
INNER JOIN Appointments a ON p.appointment_id = a.appointment_id
WHERE a.status = 'Completed';

10. Find the Doctor with the Highest Number of Appointments
sql
Copy code
SELECT d.first_name AS doctor_first_name, 
       d.last_name AS doctor_last_name, 
       COUNT(a.appointment_id) AS total_appointments
FROM Doctors d
LEFT JOIN Appointments a ON d.doctor_id = a.doctor_id
GROUP BY d.doctor_id, d.first_name, d.last_name
ORDER BY total_appointments DESC
LIMIT 1;


